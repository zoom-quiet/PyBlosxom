<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh">
<title type="text">Z<sub>en</sub>o<sub>f</sub>o<sub>pen</sub>M<sup>ind</sup>. Q<sub>uickly</sub>u<sub>tility</sub>i<sub>nternet</sub>e<sub>asy</sub>t<sup>echnic</sup></title>
<subtitle type="html"><![CDATA[
Zoom.Quiet's PyBlosxom blogging
]]></subtitle>
<id>/pyblosxom/2010/07/index.atom</id>
<link rel="alternate" type="text/html" href="/pyblosxom" />
<link rel="self" type="application/atom+xml" href="/pyblosxom/2010/07/index.atom" />


<author>
<name>Zoom.Quiet</name>
<uri>/pyblosxom/2010/07/index.atom</uri>
<email>zoomquiet+blog [AT] gmail.com</email>
</author>
<rights>Copyright 2001-2012 Zoom.Quiet</rights>
<generator uri="http://pyblosxom.sourceforge.net/" version="1.5.2">
PyBlosxom http://pyblosxom.sourceforge.net/ 1.5.2
</generator>

<updated>2010-07-30T07:00:00Z</updated>
<!-- icon?  logo?  -->

<entry>
<title type="html">MoinMoin插件hacking</title>
<category term="/utility/py4web/MoinMoin" />
<id>/pyblosxom/2010/07/30/moin-graphviz-hack-2010-07-30-15-00</id>
<updated>2010-07-30T07:00:00Z</updated>
<published>2010-07-30T07:00:00Z</published>
<link rel="alternate" type="text/html" href="/pyblosxom/utility/py4web/MoinMoin/moin-graphviz-hack-2010-07-30-15-00.html" />
<content type="html">&lt;div class=&quot;header&quot; id=&quot;header&quot;&gt;
&lt;a name=&#x27;toptopSlZYV1MzU&#x27; id=&#x27;toptopSlZYV1MzU&#x27;&gt;&lt;&#x2F;a&gt;&lt;h1&gt;MoinMoin插件hacking&lt;&#x2F;h1&gt;
&lt;h2&gt;~Graphviz 图谱可点击!&lt;&#x2F;h2&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;toc&quot; id=&quot;toc&quot;&gt;
  &lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#toc1R0VYQ0IyT&quot;&gt;需求&lt;&#x2F;a&gt;
    &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;#toc2R0VYRENMU&quot;&gt;1.1. Hacking&lt;&#x2F;a&gt;
    &lt;&#x2F;li&gt;
    &lt;li&gt;&lt;a href=&quot;#toc3R0VYREVMU&quot;&gt;1.2. jQuery&lt;&#x2F;a&gt;
    &lt;&#x2F;li&gt;
    &lt;li&gt;&lt;a href=&quot;#toc4R0VYREdMU&quot;&gt;1.3. 编码问题&lt;&#x2F;a&gt;
    &lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;&lt;a href=&quot;#toc5R0lYQ0JaT&quot;&gt;小结&lt;&#x2F;a&gt;
    &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;#toc6R0lYRENMU&quot;&gt;2.1. 时间清单&lt;&#x2F;a&gt;
    &lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
  &lt;&#x2F;li&gt;
  &lt;&#x2F;ol&gt;

&lt;&#x2F;div&gt;
&lt;div class=&quot;body&quot; id=&quot;body&quot;&gt;
&lt;a id=&quot;toc1R0VYQ0IyT&quot; name=&quot;toc1R0VYQ0IyT&quot;&gt;&lt;&#x2F;a&gt;
&lt;h1&gt;&lt;A href=&#x27;#toptopSlZYV1MzU&#x27;&gt; 1. 需求 &lt;&#x2F;A&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;
&lt;a href=&quot;http:&#x2F;&#x2F;moinmo.in&#x2F;GraphVizForMoin&quot;&gt;GraphVizForMoin&lt;&#x2F;a&gt; 插件部署到MoinMoin 中之后,很爽直!
&lt;&#x2F;p&gt;
&lt;p&gt;
参考: &lt;a href=&quot;http:&#x2F;&#x2F;wiki.woodpecker.org.cn&#x2F;moin&#x2F;GraphVizForMoin&quot;&gt;在维基中使用 Graphviz&lt;&#x2F;a&gt;~ 啄木鸟中的效果
&lt;&#x2F;p&gt;
&lt;p&gt;
可以说,解决了在维基中无法快速表达思维导图的问题:
&lt;&#x2F;p&gt;
 &lt;ul&gt;
 &lt;li&gt;以往都是使用 FreeMind 绘制后截屏附件上来
 &lt;&#x2F;li&gt;
 &lt;li&gt;或是使用插件 &lt;a href=&quot;http:&#x2F;&#x2F;moinmo.in&#x2F;ParserMarket&#x2F;FreeMind&quot;&gt;ParserMarket&#x2F;FreeMind - MoinMoin&lt;&#x2F;a&gt; 将文件使用Flash 控件就地发布出来~中文一直是个问题
 &lt;p&gt;&lt;&#x2F;p&gt;
但是,使用 Graphviz 的dot 图形脚本在维基中书写图谱一直以来残念的问题是无法输出可点击的有热区的导图!
 &lt;&#x2F;li&gt;
 &lt;&#x2F;ul&gt;

&lt;ul&gt;
&lt;li&gt;有点希望的 &lt;a href=&quot;http:&#x2F;&#x2F;moinmo.in&#x2F;ParserMarket&#x2F;ImageMap&#x2F;ReleaseNotes&quot;&gt;ParserMarket&#x2F;ImageMap&#x2F;ReleaseNotes - MoinMoin&lt;&#x2F;a&gt; 插件使用起来和 dot 命令输出的标准图片热区数据又实在相差太远...
&lt;p&gt;&lt;&#x2F;p&gt;
怎么整?! 自个儿来!
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;a id=&quot;toc2R0VYRENMU&quot; name=&quot;toc2R0VYRENMU&quot;&gt;&lt;&#x2F;a&gt;
&lt;h2&gt;&lt;A href=&#x27;#toptopSlZYV1MzU&#x27;&gt; 1.1. Hacking &lt;&#x2F;A&gt;&lt;&#x2F;h2&gt;
&lt;dl&gt;
&lt;dt&gt;思路:&lt;&#x2F;dt&gt;&lt;dd&gt;
    &lt;ul&gt;
    &lt;li&gt;hacked MoinGraphViz 令其使用&lt;code&gt;-Tcmapx -o **.mp&lt;&#x2F;code&gt;命令,输出热区定义
    &lt;&#x2F;li&gt;
    &lt;li&gt;hacked MoinMoin 相关脚本令输出到HTML 的图片认识可能的热区定义
    &lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;

&lt;dl&gt;
&lt;dt&gt;fxied:&lt;&#x2F;dt&gt;&lt;dd&gt;
    &lt;ul&gt;
    &lt;li&gt;&lt;code&gt;path&#x2F;2&#x2F;moin运行实例&#x2F;data&#x2F;plugin&#x2F;parser&#x2F;MoinGraphViz&#x2F;main.py&lt;&#x2F;code&gt; 是插件的主体
    &lt;&#x2F;li&gt;
    &lt;li&gt;很直白,快速就定位了具体代码进行了修订
    &lt;p&gt;&lt;&#x2F;p&gt;
    &lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
&lt;&#x2F;dd&gt;
&lt;dt&gt;diff:&lt;&#x2F;dt&gt;&lt;dd&gt;
&lt;p&gt;&lt;&#x2F;p&gt;
&lt;pre class=&quot;brush:  diff&quot;&gt;

Index: tasks&#x2F;wiki.KUP&#x2F;MoinMoin&#x2F;parser&#x2F;MoinGraphViz&#x2F;main.py
===================================================================
--- tasks&#x2F;wiki.KUP&#x2F;MoinMoin&#x2F;parser&#x2F;MoinGraphViz&#x2F;main.py (revision 16946)
+++ tasks&#x2F;wiki.KUP&#x2F;MoinMoin&#x2F;parser&#x2F;MoinGraphViz&#x2F;main.py (revision 16975)
@@ -56,4 +56,5 @@
         p = request.formatter.page
         self.renderer = Renderer(tool, targetdir=p.getPagePath(&#x27;attachments&#x27;), encoding=config.charset)
+        self.attapath = p.getPagePath(&#x27;attachments&#x27;)

     def format(self, formatter):
@@ -61,5 +62,10 @@
         ##w(&#x27;&amp;lt;div style=&quot;border:3px ridge gray; padding:5px; width:95%; overflow:auto&quot;&amp;gt;&#x27;)
         s = self.renderer.render(self.raw)
+        imgname = os.path.basename(s)
+        #s = wiki2html(self.request, &#x27;{{attachment:%s}}&#x27; % os.path.basename(s))
         s = wiki2html(self.request, &#x27;{{attachment:%s}}&#x27; % os.path.basename(s))
+        #   100728 Zoom.Quiet fixed for include URL hotarea map define
+        pfImgMap = &quot;%s&#x2F;%s.map&quot;%(self.attapath,imgname)
+        s += fread(pfImgMap)
         print &#x27;[TRACE] attachment URL:&#x27;, s
         w(s)
@@ -182,5 +193,7 @@

 def renderGraphImage(tool, format, imagefilename, dotfilename):
-    cmd = &#x27;%(tool)s -T%(format)s -o&quot;%(imagefilename)s&quot; &quot;%(dotfilename)s&quot;&#x27; % locals()
+    #100728 Zoom.Quiet fixed for export URL hotarea map export
+    cmd = &#x27;%(tool)s -T%(format)s -o&quot;%(imagefilename)s&quot; -Tcmapx -o &quot;%(imagefilename)s.map&quot; &quot;%(dotfilename)s&quot;&#x27; % locals()
+    #cmd = &#x27;%(tool)s -T%(format)s -o&quot;%(imagefilename)s&quot; &quot;%(dotfilename)s&quot;&#x27; % locals()
     print &#x27;[TRACE] executing:&#x27;, cmd
     os.system(cmd

&lt;&#x2F;pre&gt;
&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;

&lt;dl&gt;
&lt;dt&gt;html 输出:&lt;&#x2F;dt&gt;&lt;dd&gt;
&lt;p&gt;&lt;&#x2F;p&gt;
&lt;pre class=&quot;brush:  html&quot;&gt;

&amp;lt;img alt=&quot;graphviz-hostLegendG-a58ce04d28b92b59230a72964c27a9f8fc867de5.png&quot; 
class=&quot;attachment&quot; 
src=&quot;&#x2F;moin&#x2F;KupHostsMapping&#x2F;MapLegend?action=AttachFile&amp;amp;amp;do=get&amp;amp;amp;target=graphviz-hostLegendG-a58ce04d28b92b59230a72964c27a9f8fc867de5.png&quot; 
title=&quot;graphviz-hostLegendG-a58ce04d28b92b59230a72964c27a9f8fc867de5.png&quot; &#x2F;&amp;gt; 
&amp;lt;map id=&quot;hostLegendG&quot; name=&quot;hostLegendG&quot;&amp;gt;
&amp;lt;area shape=&quot;rect&quot; href=&quot;http:&#x2F;&#x2F;wiki.s.kingsoft.net&#x2F;moin&#x2F;KupHosts&quot; title=&quot;普配主机&quot; alt=&quot;&quot; coords=&quot;101,36,173,63&quot;&#x2F;&amp;gt;
&amp;lt;area shape=&quot;rect&quot; href=&quot;http:&#x2F;&#x2F;wiki.s.kingsoft.net&#x2F;moin&#x2F;KupHosts&quot; title=&quot;高配主机&quot; alt=&quot;&quot; coords=&quot;197,36,269,63&quot;&#x2F;&amp;gt;
&amp;lt;&#x2F;map&amp;gt;
&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;&#x2F;p&gt;
&lt;b&gt;注意&lt;&#x2F;b&gt;: 发现,插件是直接使用&lt;code&gt;{{attachment:导图图片名}}&lt;&#x2F;code&gt; 标准的图片附件形式来发布的!
&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;

&lt;ul&gt;
&lt;li&gt;然而,HTML 中要想啓用热区图,至少要有专用属性的对应:
&lt;pre&gt;
&amp;lt;img usemap=&quot;#俺的ImgMap&quot; src=&quot;...&quot;&#x2F;&amp;gt;
&amp;lt;map id=&quot;俺的ImgMap&quot; name=&quot;俺的ImgMap&quot;&amp;gt;
&amp;lt;area shape=&quot;rect&quot; href=&quot;...&quot; title=&quot;普配主机&quot; alt=&quot;&quot; coords=&quot;101,36,173,63&quot;&#x2F;&amp;gt;
...
&amp;lt;&#x2F;map&amp;gt;
&lt;&#x2F;pre&gt;
 &lt;ul&gt;
 &lt;li&gt;在dot 输出的map 数据中,id&#x2F;name 就是``digraph G { `` 第一行的那个G,可以任意命名,当然最好是E文
 &lt;&#x2F;li&gt;
 &lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;所以,就得找到方法来让 MoinMoin 对附件图片追加&lt;code&gt;usemap&lt;&#x2F;code&gt;属性
&lt;p&gt;&lt;&#x2F;p&gt;
找哈找,幸好有 &lt;a href=&quot;http:&#x2F;&#x2F;manpages.ubuntu.com&#x2F;manpages&#x2F;jaunty&#x2F;man1&#x2F;ack-grep.1p.html&quot;&gt;ack-grep&lt;&#x2F;a&gt; 快速从一堆脚本中定位到靠谱的代码段:
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;pre&gt;
path&#x2F;2&#x2F;python2.5&#x2F;site-packages&#x2F;MoinMoin&#x2F;formatter&#x2F;text_html.py
...
    def attachment_image(self, url, **kw):
        ...
        if exists:
            ...
            if not &#x27;alt&#x27; in kw:
                kw[&#x27;alt&#x27;] = kw[&#x27;title&#x27;]
            #   100729 Zoom.Quiet fixed for support imagemap for Graphviz
            kw[&#x27;usemap&#x27;] = &quot;#%s&quot;%kw[&#x27;alt&#x27;]
            return self.image(**kw)
        ...
&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;&#x2F;p&gt;
&lt;p&gt;
追加一行就好...
&lt;&#x2F;p&gt;
&lt;a id=&quot;toc3R0VYREVMU&quot; name=&quot;toc3R0VYREVMU&quot;&gt;&lt;&#x2F;a&gt;
&lt;h2&gt;&lt;A href=&#x27;#toptopSlZYV1MzU&#x27;&gt; 1.2. jQuery &lt;&#x2F;A&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;
虽然目标完成了,但是心里总感觉不好:
&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;MoinMoin 本身的脚本被hacking 了,就等于,以后升級,迁移时,都要维护这一hacking
&lt;&#x2F;li&gt;
&lt;li&gt;很不 Pythonic 哪...
&lt;p&gt;&lt;&#x2F;p&gt;
怎么样脱离 MoinMoin 系统本身来给附件图片追加&lt;code&gt;usemap&lt;&#x2F;code&gt; 属性?
&lt;&#x2F;li&gt;
&lt;li&gt;答案,自然是的 Ajax 哪
&lt;&#x2F;li&gt;
&lt;li&gt;jQuery 就是为这类快速夹塞儿式行为诞生的哪...
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;dl&gt;
&lt;dt&gt;部署jQuery:&lt;&#x2F;dt&gt;&lt;dd&gt;
    &lt;ul&gt;
    &lt;li&gt;这是样式的事儿,所以:
    &lt;p&gt;&lt;&#x2F;p&gt;
&lt;pre&gt;
path&#x2F;2&#x2F;moin实例&#x2F;
+-- data
    +-- plugin
        +-- theme
            +-- 你的样式定义脚本
            +-- woodpecker.py ~ 俺用的
        def footer(self, d, **keywords):
            ... # 追加
            u&#x27;&amp;lt;!-- Finally, to loading jQuery Ajax Lib. --&amp;gt;&#x27;,
            u&#x27;&amp;lt;script src=&quot;&#x2F;wiki&#x2F;common&#x2F;js&#x2F;jquery-1.4.2.min.js&quot; type=&quot;text&#x2F;javascript&quot;&amp;gt;&amp;lt;&#x2F;script&amp;gt;&#x27;,
            u&#x27;&amp;lt;script src=&quot;&#x2F;wiki&#x2F;common&#x2F;js&#x2F;jquery-graphviz-map.js&quot; type=&quot;text&#x2F;javascript&quot;&amp;gt;&amp;lt;&#x2F;script&amp;gt;&#x27;,

+-- htdoc
    +-- common
        +-- js
            +-- jquery-1.4.2.min.js ~ 官方运营用压缩版本
            +-- jquery-graphviz-map.js  ~ 动态行为定义用
&lt;&#x2F;pre&gt;
    &lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;

&lt;dl&gt;
&lt;dt&gt;使用jQuery:&lt;&#x2F;dt&gt;&lt;dd&gt;
    &lt;ul&gt;
    &lt;li&gt;看看文档,就两行搞定..
&lt;pre class=&quot;brush:  js&quot;&gt;

$(document).ready(function() {
	$(&quot;img[class=&#x27;attachment&#x27;]&quot;).each(function(){
	    $(this).attr(&quot;usemap&quot;,&quot;#&quot;+$(this).attr(&quot;alt&quot;));
    });
});
&lt;&#x2F;pre&gt;
     &lt;ul&gt;
     &lt;li&gt;&lt;b&gt;特别的&lt;&#x2F;b&gt;:得考虑一页多个导图时的情况,所以是要进行 &lt;code&gt;each()&lt;&#x2F;code&gt; 循环处置
     &lt;&#x2F;li&gt;
     &lt;&#x2F;ul&gt;
    &lt;&#x2F;li&gt;
    &lt;li&gt;当然的,需要 &lt;code&gt;MoinGraphViz&#x2F;main.py&lt;&#x2F;code&gt;插件的配合,以便从附图的 alt 中获得正确的图片热区ID
    &lt;p&gt;&lt;&#x2F;p&gt;
&lt;pre class=&quot;brush:  diff&quot;&gt;

Index: tasks&#x2F;wiki.KUP&#x2F;MoinMoin&#x2F;parser&#x2F;MoinGraphViz&#x2F;main.py
===================================================================
--- tasks&#x2F;wiki.KUP&#x2F;MoinMoin&#x2F;parser&#x2F;MoinGraphViz&#x2F;main.py (revision 17010)
+++ tasks&#x2F;wiki.KUP&#x2F;MoinMoin&#x2F;parser&#x2F;MoinGraphViz&#x2F;main.py (revision 17013)
@@ -65,5 +65,8 @@
         fImgName = os.path.basename(s)
         pfImgMap = &quot;%s&#x2F;%s.map&quot;%(self.attapath,fImgName)
-        s = wiki2html(self.request, &#x27;{{attachment:%s}}&#x27; % os.path.basename(s))
+        #s = wiki2html(self.request, &#x27;{{attachment:%s}}&#x27; % os.path.basename(s))
+        s = wiki2html(self.request, &#x27;{{attachment:%s|%s}}&#x27; % (os.path.basename(s)
+                        ,fImgName.split(&quot;-&quot;)[1])
+                    )
         #   100728 Zoom.Quiet appended &amp;lt;map&amp;gt; data
         if os.path.exists(pfImgMap):
&lt;&#x2F;pre&gt;
    &lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;

&lt;a id=&quot;toc4R0VYREdMU&quot; name=&quot;toc4R0VYREdMU&quot;&gt;&lt;&#x2F;a&gt;
&lt;h2&gt;&lt;A href=&#x27;#toptopSlZYV1MzU&#x27;&gt; 1.3. 编码问题 &lt;&#x2F;A&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;
一切表现良好,无意间发现凡是有URL包含的 dot 图谱,被其它页面包含时就出错!
&lt;&#x2F;p&gt;
&lt;p&gt;
&lt;img align=&quot;middle&quot; src=&quot;&#x2F;pybimage&#x2F;2010&#x2F;moin-graphviz-erro-2010-07-30-121804_780x382_scrot.png&quot; border=&quot;0&quot; alt=&quot;&quot;&#x2F;&gt;
&lt;&#x2F;p&gt;
&lt;dl&gt;
&lt;dt&gt;囧rz...:&lt;&#x2F;dt&gt;&lt;dd&gt;
&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;

&lt;ul&gt;
&lt;li&gt;尝试各种编码,未果
&lt;&#x2F;li&gt;
&lt;li&gt;嘗試各种&amp;lt;map&amp;gt;的包装形式:
    &lt;ol&gt;
    &lt;li&gt;使用  &amp;lt;pre&amp;gt;
    &lt;&#x2F;li&gt;
    &lt;li&gt;使用  &amp;lt;textarea&amp;gt;
    &lt;&#x2F;li&gt;
    &lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;都在  Include 时,可怜的出错了...
&lt;&#x2F;li&gt;
&lt;li&gt;实在是因为 MoinMoin 不想处理正常的 HTML 标签属性的其它编码内容
&lt;&#x2F;li&gt;
&lt;li&gt;好吧,俺就不给出无用的中文内容!
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;path&#x2F;2&#x2F;moin运行实例&#x2F;data&#x2F;plugin&#x2F;parser&#x2F;MoinGraphViz&#x2F;main.py&lt;&#x2F;code&gt; 追加一小段正则表达式替换
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;pre class=&quot;brush:  py&quot;&gt;

    def format(self, formatter):
        w = self.request.write
        #...
        #   100728 Zoom.Quiet appended &amp;lt;map&amp;gt; data
        if os.path.exists(pfImgMap):
            import re
            p=re.compile( &#x27;title=\&quot;.+?\&quot;&#x27;)
            s += p.sub(&quot;title=\&quot;\&quot;&quot;,fread(pfImgMap))
            #s += fread(pfImgMap)

&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;&#x2F;p&gt;
&lt;dl&gt;
&lt;dt&gt;HTML 输出:&lt;&#x2F;dt&gt;&lt;dd&gt;
&lt;p&gt;&lt;&#x2F;p&gt;
&lt;pre class=&quot;brush:  html&quot;&gt;

&amp;lt;img alt=&quot;graphviz-hostLegendG-a58ce04d28b92b59230a72964c27a9f8fc867de5.png&quot; 
class=&quot;attachment&quot; 
src=&quot;&#x2F;moin&#x2F;KupHostsMapping&#x2F;MapLegend?action=AttachFile&amp;amp;amp;do=get&amp;amp;amp;target=graphviz-hostLegendG-a58ce04d28b92b59230a72964c27a9f8fc867de5.png&quot; 
title=&quot;graphviz-hostLegendG-a58ce04d28b92b59230a72964c27a9f8fc867de5.png&quot; &#x2F;&amp;gt; 
&amp;lt;map id=&quot;hostLegendG&quot; name=&quot;hostLegendG&quot;&amp;gt;
&amp;lt;area shape=&quot;rect&quot; href=&quot;http:&#x2F;&#x2F;wiki.s.kingsoft.net&#x2F;moin&#x2F;KupHosts&quot; title=&quot;&quot; alt=&quot;&quot; coords=&quot;101,36,173,63&quot;&#x2F;&amp;gt;
&amp;lt;area shape=&quot;rect&quot; href=&quot;http:&#x2F;&#x2F;wiki.s.kingsoft.net&#x2F;moin&#x2F;KupHosts&quot; title=&quot;&quot; alt=&quot;&quot; coords=&quot;197,36,269,63&quot;&#x2F;&amp;gt;
&amp;lt;&#x2F;map&amp;gt;
&lt;&#x2F;pre&gt;
&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;

&lt;p&gt;
一切安定了...
&lt;&#x2F;p&gt;
&lt;a id=&quot;toc5R0lYQ0JaT&quot; name=&quot;toc5R0lYQ0JaT&quot;&gt;&lt;&#x2F;a&gt;
&lt;h1&gt;&lt;A href=&#x27;#toptopSlZYV1MzU&#x27;&gt; 2. 小结 &lt;&#x2F;A&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;思路不乱的情况下,主要问题就是定位代码段!以及测试!
    &lt;ul&gt;
    &lt;li&gt;面对一运行中的MoinMoin 进行测试开发时
    &lt;&#x2F;li&gt;
    &lt;li&gt;使用sshfs 可以快速挂接远程服务器的任意目录,非常方便!
    &lt;&#x2F;li&gt;
    &lt;li&gt;使用沙箱页面进行修订插件的测试,可以避免正常文章页面的中间调试失常..
    &lt;&#x2F;li&gt;
    &lt;li&gt;在调试中,直接输出预想数据到 HTML 里看,比看系统日志,使用print 要方便
    &lt;&#x2F;li&gt;
    &lt;li&gt;MoinMoin 有完备的缓冲机制,要及时看到修订效果,得重启HTTPD     
    &lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;jQuery 真的很好用,也好学!
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;dl&gt;
&lt;dt&gt;下载:&lt;&#x2F;dt&gt;&lt;dd&gt;
    diff: &lt;a href=&quot;&#x2F;pybnodes&#x2F;utility&#x2F;py4web&#x2F;MoinMoin&#x2F;MoinMoin_parser_MoinGraphViz_main.py-from-r16946-to-r17013.diff&quot;&gt;MoinMoin_parser_MoinGraphViz_main.py-from-r16946-to-r17013.diff&lt;&#x2F;a&gt;
&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;

&lt;a id=&quot;toc6R0lYRENMU&quot; name=&quot;toc6R0lYRENMU&quot;&gt;&lt;&#x2F;a&gt;
&lt;h2&gt;&lt;A href=&#x27;#toptopSlZYV1MzU&#x27;&gt; 2.1. 时间清单 &lt;&#x2F;A&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;00:05 定目标
&lt;&#x2F;li&gt;
&lt;li&gt;00:15 准备环境
&lt;&#x2F;li&gt;
&lt;li&gt;01:30 探查运行环境,明确修订目标脚本
&lt;&#x2F;li&gt;
&lt;li&gt;01:45 插件修订完成
&lt;&#x2F;li&gt;
&lt;li&gt;00:15 图片应用map jQuery 嘗試
&lt;&#x2F;li&gt;
&lt;li&gt;00:35 图片插入系统修订完成
&lt;&#x2F;li&gt;
&lt;li&gt;01:00 正则表达式+jQuery 解决 Incldue() 时的编码问题
&lt;&#x2F;li&gt;
&lt;li&gt;00:45 整理代码,发布到Blog
&lt;&#x2F;li&gt;
&lt;li&gt;00:35 整理代码,反馈到MoinMoin.in
&lt;&#x2F;li&gt;
&lt;li&gt;00:40 8次中断,回到工作场景的心理浪费
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;

&lt;p&gt;
&lt;b&gt;总计:&lt;&#x2F;b&gt; ~ 6小时
&lt;&#x2F;p&gt;
&lt;hr class=&quot;light&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;t2t渲染:: 2010-10-09 02:21:37
&lt;&#x2F;li&gt;
&lt;li&gt;动力源自::&lt;b&gt;&lt;a href=&quot;http:&#x2F;&#x2F;txt2tags.sf.net&quot;&gt;txt2tags&lt;&#x2F;a&gt;&lt;&#x2F;b&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;&#x2F;div&gt;

&lt;!-- xhtml code generated by txt2tags 2.4 (http:&#x2F;&#x2F;txt2tags.sf.net) --&gt;
&lt;!-- cmdline: txt2tags .&#x2F;utility&#x2F;py4web&#x2F;MoinMoin&#x2F;moin-graphviz-hack-2010-07-30-15-00.t2t --&gt;
</content>
</entry>

<entry>
<title type="html">[Py4SA]智能关闭触摸板</title>
<category term="/utility/py4sys" />
<id>/pyblosxom/2010/07/14/py4sa-off-wacom-touch-2010-07-14-10-22</id>
<updated>2010-07-14T02:22:00Z</updated>
<published>2010-07-14T02:22:00Z</published>
<link rel="alternate" type="text/html" href="/pyblosxom/utility/py4sys/py4sa-off-wacom-touch-2010-07-14-10-22.html" />
<content type="html">&lt;div class=&quot;header&quot; id=&quot;header&quot;&gt;
&lt;a name=&#x27;toptopTE5JSFNOQ&#x27; id=&#x27;toptopTE5JSFNOQ&#x27;&gt;&lt;&#x2F;a&gt;&lt;h1&gt;[Py4SA]智能关闭触摸板&lt;&#x2F;h1&gt;
&lt;h2&gt;--WACOM BAMBOO事务&lt;&#x2F;h2&gt;
&lt;h3&gt;t2t渲染:: 2010-10-09 14:21:37&lt;&#x2F;h3&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;toc&quot; id=&quot;toc&quot;&gt;
  &lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#toc1R0VYQ0IyT&quot;&gt;问题&lt;&#x2F;a&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;&lt;a href=&quot;#toc2R0lYQ0JaT&quot;&gt;尝试&lt;&#x2F;a&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;&lt;a href=&quot;#toc3R01YQ0FVR&quot;&gt;Py之&lt;&#x2F;a&gt;
  &lt;&#x2F;li&gt;
  &lt;&#x2F;ol&gt;

&lt;&#x2F;div&gt;
&lt;div class=&quot;body&quot; id=&quot;body&quot;&gt;
&lt;a id=&quot;toc1R0VYQ0IyT&quot; name=&quot;toc1R0VYQ0IyT&quot;&gt;&lt;&#x2F;a&gt;
&lt;h1&gt;&lt;A href=&#x27;#toptopTE5JSFNOQ&#x27;&gt; 1. 问题 &lt;&#x2F;A&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;
嗯嗯嗯,俺一直使用 WACOM 的数字绘图板替代鼠标的 ；－）
&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;去年生日，老婆升级了俺的 &lt;a href=&quot;http:&#x2F;&#x2F;www.wacom.com.cn&#x2F;products_before_detail.php?productsid=30&quot;&gt;FAVO CTE-430&lt;&#x2F;a&gt;
到 &lt;a href=&quot;http:&#x2F;&#x2F;www.wacom.com.cn&#x2F;bamboo&#x2F;case4-1.php&quot;&gt;BAMBOO CTH-461&lt;&#x2F;a&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;随着 Ubuntu 10.04系统，一同升级了驱动，非常好用:
    &lt;ol&gt;
    &lt;li&gt;小横板 248.2 x 176.1，和屏幕 1:1 对应，不用拖动，有空间感觉了直接就可以移动到对应区域!
    &lt;&#x2F;li&gt;
    &lt;li&gt;无线压感笔，直接点击就是左击鼠标
    &lt;&#x2F;li&gt;
    &lt;li&gt;笔有侧键，配置默认就是原先最舒服的:
     &lt;ul&gt;
     &lt;li&gt;上键是右击
     &lt;&#x2F;li&gt;
     &lt;li&gt;下键是中击
     &lt;&#x2F;li&gt;
     &lt;&#x2F;ul&gt;
    &lt;&#x2F;li&gt;
    &lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b&gt;触摸板的手指点击就不必要了&lt;&#x2F;b&gt;
 &lt;ul&gt;
 &lt;li&gt;如何令系统不启动触摸板的 &lt;code&gt;Touch&lt;&#x2F;code&gt; 响应?
 &lt;&#x2F;li&gt;
 &lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;a id=&quot;toc2R0lYQ0JaT&quot; name=&quot;toc2R0lYQ0JaT&quot;&gt;&lt;&#x2F;a&gt;
&lt;h1&gt;&lt;A href=&#x27;#toptopTE5JSFNOQ&#x27;&gt; 2. 尝试 &lt;&#x2F;A&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;linuxwacom.sourceforge.net&#x2F;index.php&#x2F;howto&#x2F;xsetwacom&quot;&gt;Command Line Configuration Interface (xsetwacom)&lt;&#x2F;a&gt;
    &lt;ul&gt;
    &lt;li&gt;官方是有命令行级别的配置工具的
    &lt;&#x2F;li&gt;
    &lt;li&gt;但是！真TMD难以看明白哈
    &lt;&#x2F;li&gt;
    &lt;li&gt;广泛的搜索后，大致明白,xsetwacom 提供两种配置输出:
        &lt;ol&gt;
        &lt;li&gt;命令行用的执行字串
        &lt;&#x2F;li&gt;
        &lt;li&gt;配置文件中使用的配置文本
        &lt;&#x2F;li&gt;
        &lt;&#x2F;ol&gt;
    &lt;&#x2F;li&gt;
    &lt;li&gt;整个使用流程是:
        &lt;ol&gt;
        &lt;li&gt;使用其它系统监察命令，确认 WACOM 设备USB接入后的设备号
        &lt;&#x2F;li&gt;
        &lt;li&gt;使用 xsetwacom 进行模拟配置，选择输出合适的配置命令
        &lt;&#x2F;li&gt;
        &lt;li&gt;然后将输出的配置内容,部署到合适的系统启动脚本或是配置文件中
        &lt;p&gt;&lt;&#x2F;p&gt;
        &lt;&#x2F;li&gt;
        &lt;&#x2F;ol&gt;
    &lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;俺习惯使用命令行配置,这样可以直接测试是否靠谱,但是发现:
&lt;pre class=&quot;brush:  shell&quot;&gt;

~&amp;gt; xinput --list 
⎡ Virtual core pointer                    	id=2	[master pointer  (3)]
⎜   ↳ Virtual core XTEST pointer              	id=4	[slave  pointer  (2)]
⎜   ↳ Wacom Bamboo Craft Pen eraser           	id=11	[slave  pointer  (2)]
⎜   ↳ Wacom Bamboo Craft Pen                  	id=12	[slave  pointer  (2)]
⎜   ↳ Wacom Bamboo Craft Finger pad           	id=13	[slave  pointer  (2)]
⎜   ↳ Wacom Bamboo Craft Finger               	id=14	[slave  pointer  (2)]
⎜   ↳ TPPS&#x2F;2 IBM TrackPoint                   	id=16	[slave  pointer  (2)]
⎜   ↳ Macintosh mouse button emulation        	id=18	[slave  pointer  (2)]
⎣ Virtual core keyboard                   	id=3	[master keyboard (2)]
    ↳ Virtual core XTEST keyboard             	id=5	[slave  keyboard (3)]
...
&lt;&#x2F;pre&gt;
    &lt;ul&gt;
    &lt;li&gt;使用 xinput 探察出来的 &lt;b&gt;Wacom Bamboo Craft Finger&lt;&#x2F;b&gt; 触摸板设备号,每次重启系统时不一定一样!
    &lt;&#x2F;li&gt;
    &lt;li&gt;FT! 那就得编程让系统重启时,自个儿探察一下设备号,然后使用固定的配置命令关闭 BAMBOO 对应设备
    &lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;dl&gt;
&lt;dt&gt;如何在Shell 中获取另外系统命令的输出并截获对应数码组合成新的命令?:&lt;&#x2F;dt&gt;&lt;dd&gt;
    嗯嗯嗯,,,
    嗯嗯嗯,,,,直接囧掉!
    俺没有这种功力!
&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;

&lt;a id=&quot;toc3R01YQ0FVR&quot; name=&quot;toc3R01YQ0FVR&quot;&gt;&lt;&#x2F;a&gt;
&lt;h1&gt;&lt;A href=&#x27;#toptopTE5JSFNOQ&#x27;&gt; 3. Py之 &lt;&#x2F;A&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;直接使用模板记录要执行的命令,预留可能变动的设备号:
&lt;pre class=&quot;brush:  shell&quot;&gt;

#!&#x2F;bin&#x2F;sh
### xinput4bamboo.tpl
sleep 3 &amp;amp;&amp;amp; xsetwacom set %s Touch &quot;off&quot;

&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;配合xinput4bamboo.py 
&lt;pre class=&quot;brush:  py&quot;&gt;

import sys,os
if __name__ == &#x27;__main__&#x27;:      # this way the module can be
    &quot;&quot;&quot;usage:
    $ xinput --list | grep &quot;Wacom Bamboo Craft Finger&quot; | python .&#x2F;xinput4bamboo.py
    &quot;&quot;&quot;
    if sys.stdin:
        for l in sys.stdin.readlines():
            if &quot;pad&quot; not in l:
                bambooid= l.split()[6].split(&quot;=&quot;)[1]
                open(&quot;xinput4bamboo.sh&quot;,&quot;w&quot;).write(open(&quot;xinput4bamboo.tpl&quot;).read()%bambooid)
                os.chmod(&quot;xinput4bamboo.sh&quot;,0755)

&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;组合成启动脚本
&lt;pre class=&quot;brush:  shell&quot;&gt;

#!&#x2F;bin&#x2F;sh
VER=&quot;main-rcloc.sh v10.7.14&quot;
DATE=`date &quot;+%y%m%d&quot;`
MYRC=&quot;&#x2F;home&#x2F;zoomq&#x2F;.zoomq&#x2F;rc.local&quot;
#=========================================================== path defines
LOGF=&quot;&#x2F;var&#x2F;log&#x2F;0day&#x2F;$DATE-myrcloc.log&quot;
#=========================================================== action defines
cd $MYRC
xinput --list | grep &quot;Wacom Bamboo Craft Finger&quot; | python .&#x2F;xinput4bamboo.py  &amp;gt;&amp;gt; $LOGF 2&amp;gt;&amp;amp;1 
.&#x2F;xinput4bamboo.sh  &amp;gt;&amp;gt; $LOGF 2&amp;gt;&amp;amp;1 
&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;部属成启动应用:
 &lt;ul&gt;
 &lt;li&gt;&lt;img align=&quot;middle&quot; src=&quot;&#x2F;pybimage&#x2F;2010&#x2F;zoomq-2010-07-14-123737_530x267_scrot.png&quot; border=&quot;0&quot; alt=&quot;&quot;&#x2F;&gt;
 &lt;p&gt;&lt;&#x2F;p&gt;
&lt;b&gt;齐活！&lt;&#x2F;b&gt; 没有疑惑，随手写成！ 5分钟！
 &lt;&#x2F;li&gt;
 &lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;dl&gt;
&lt;dt&gt;Python在Unix和Linux系统管理中的应用(影印版):&lt;&#x2F;dt&gt;&lt;dd&gt;
&lt;a href=&quot;http:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;3767034&#x2F;&quot;&gt;&lt;img align=&quot;middle&quot; src=&quot;&#x2F;pybimage&#x2F;2010&#x2F;s3876423-py4unix-linux-sa.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&#x2F;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;

&lt;ul&gt;
&lt;li&gt;绝对好书! 值得慢慢看,E文非常简洁,Py清明的代码,直接看&#x2F;尝试就可以体会到本意了...
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;hr class=&quot;light&quot; &#x2F;&gt;
&lt;p&gt;
动力源自::&lt;b&gt;&lt;a href=&quot;http:&#x2F;&#x2F;txt2tags.sf.net&quot;&gt;txt2tags&lt;&#x2F;a&gt;&lt;&#x2F;b&gt;
&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;

&lt;!-- xhtml code generated by txt2tags 2.4 (http:&#x2F;&#x2F;txt2tags.sf.net) --&gt;
&lt;!-- cmdline: txt2tags .&#x2F;utility&#x2F;py4sys&#x2F;py4sa-off-wacom-touch-2010-07-14-10-22.t2t --&gt;
</content>
</entry>

<entry>
<title type="html">[Py4SA]批量文件重命名</title>
<category term="/utility/py4sys" />
<id>/pyblosxom/2010/07/13/py4sa-rename-mp3s-2010-07-13-22-02</id>
<updated>2010-07-13T14:02:00Z</updated>
<published>2010-07-13T14:02:00Z</published>
<link rel="alternate" type="text/html" href="/pyblosxom/utility/py4sys/py4sa-rename-mp3s-2010-07-13-22-02.html" />
<content type="html">&lt;div class=&quot;header&quot; id=&quot;header&quot;&gt;
&lt;a name=&#x27;toptopTE5JSFNOQ&#x27; id=&#x27;toptopTE5JSFNOQ&#x27;&gt;&lt;&#x2F;a&gt;&lt;h1&gt;[Py4SA]批量文件重命名&lt;&#x2F;h1&gt;
&lt;h2&gt;--远离Shell 的试探&lt;&#x2F;h2&gt;
&lt;h3&gt;t2t渲染:: 2010-10-09 14:21:37&lt;&#x2F;h3&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;toc&quot; id=&quot;toc&quot;&gt;
  &lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#toc1R0VYQ0IyT&quot;&gt;问题&lt;&#x2F;a&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;&lt;a href=&quot;#toc2R0lYQ0JaT&quot;&gt;尝试&lt;&#x2F;a&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;&lt;a href=&quot;#toc3R01YQ0FVR&quot;&gt;Py之&lt;&#x2F;a&gt;
  &lt;&#x2F;li&gt;
  &lt;&#x2F;ol&gt;

&lt;&#x2F;div&gt;
&lt;div class=&quot;body&quot; id=&quot;body&quot;&gt;
&lt;a id=&quot;toc1R0VYQ0IyT&quot; name=&quot;toc1R0VYQ0IyT&quot;&gt;&lt;&#x2F;a&gt;
&lt;h1&gt;&lt;A href=&#x27;#toptopTE5JSFNOQ&#x27;&gt; 1. 问题 &lt;&#x2F;A&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;
嗯嗯嗯,最近从 六哥的 DUKU 重新激发了评书的记忆,下载了全本 袁阔成(40回)红岩魂的mp3 ;-)
&lt;&#x2F;p&gt;
&lt;p&gt;
可是解开都是乱码文件名:
&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;:&lt;img align=&quot;middle&quot; src=&quot;&#x2F;pybimage&#x2F;2010&#x2F;zoomq-2010-07-14-105626_446x300_scrot.png&quot; border=&quot;0&quot; alt=&quot;&quot;&#x2F;&gt;;
&lt;&#x2F;li&gt;
&lt;li&gt;可恶的中文编码! 一定是在XP 中使用CP936 压出来的
&lt;&#x2F;li&gt;
&lt;li&gt;怎么整呢?
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;dl&gt;
&lt;dt&gt;Python在Unix和Linux系统管理中的应用(影印版):&lt;&#x2F;dt&gt;&lt;dd&gt;
&lt;a href=&quot;http:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;3767034&#x2F;&quot;&gt;&lt;img align=&quot;middle&quot; src=&quot;&#x2F;pybimage&#x2F;2010&#x2F;s3876423-py4unix-linux-sa.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&#x2F;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;

&lt;ul&gt;
&lt;li&gt;绝对好书! 值得慢慢看,E文的也非常简洁,Py 清明的代码,直接看,尝试就可以体会到本意了...
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;a id=&quot;toc2R0lYQ0JaT&quot; name=&quot;toc2R0lYQ0JaT&quot;&gt;&lt;&#x2F;a&gt;
&lt;h1&gt;&lt;A href=&#x27;#toptopTE5JSFNOQ&#x27;&gt; 2. 尝试 &lt;&#x2F;A&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;
&lt;code&gt;已知有很多途径...&lt;&#x2F;code&gt;参考:&lt;a href=&quot;http:&#x2F;&#x2F;hi.baidu.com&#x2F;sdusoul&#x2F;blog&#x2F;item&#x2F;16f81a9508a1d640d0135ede.html&quot;&gt;linux下批量修改文件名_乌哥的家常菜_百度空间&lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;使用find、awk&#x2F;grep&#x2F;sed、mv等命令组合来实现
    &lt;ul&gt;
    &lt;li&gt;俺都不熟练,而且要串很多步操作，忒不直爽了..
    &lt;p&gt;&lt;&#x2F;p&gt;
    &lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;编写Shell脚本运行~ 不就是命令组合嘛,,.,
&lt;&#x2F;li&gt;
&lt;li&gt;rename ... NGU&#x2F;Linux 中的标准化重命名工具,但是,怎么可以将批量文件中指定前几个字符替换成指定字符?
&lt;pre class=&quot;brush:  shell&quot;&gt;

~&#x2F;media&#x2F;4talking&#x2F;袁阔诚&#x2F;try&amp;gt; rename -n &#x27;s&#x2F;^.{6}&#x2F;红岩魂&#x2F;&#x27; *.mp3
...
���һ�38.mp3 renamed as 红岩魂38.mp3
���һ�39.mp3 renamed as 红岩魂39.mp3
���һ�40.mp3 renamed as 红岩魂40.mp3
&lt;&#x2F;pre&gt;
    &lt;ul&gt;
    &lt;li&gt;反复尝试半小时才获得满意的...
    &lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;

&lt;a id=&quot;toc3R01YQ0FVR&quot; name=&quot;toc3R01YQ0FVR&quot;&gt;&lt;&#x2F;a&gt;
&lt;h1&gt;&lt;A href=&#x27;#toptopTE5JSFNOQ&#x27;&gt; 3. Py之 &lt;&#x2F;A&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;
想嘗試Py 的思路...
&lt;&#x2F;p&gt;
&lt;pre class=&quot;brush:  py&quot;&gt;

import sys,shutil
if __name__ == &#x27;__main__&#x27;:      # this way the module can be
    &#x27;&#x27;&#x27;usage:
        $ ls *.mp3 | python rename-zh.py
    &#x27;&#x27;&#x27;
    if sys.stdin:
        for l in sys.stdin.readlines():
            shutil.copyfile(l[:-1], &quot;redStoneSoul-%s&quot;%l[6:-1])
&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;好的,没有尝试,随手写来,3分钟搞掂
&lt;p&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;dl&gt;
&lt;dt&gt;Python在Unix和Linux系统管理中的应用(影印版):&lt;&#x2F;dt&gt;&lt;dd&gt;
&lt;a href=&quot;http:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;3767034&#x2F;&quot;&gt;&lt;img align=&quot;middle&quot; src=&quot;&#x2F;pybimage&#x2F;2010&#x2F;s3876423-py4unix-linux-sa.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&#x2F;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;

&lt;ul&gt;
&lt;li&gt;绝对好书! 值得慢慢看,E文非常简洁,Py清明的代码,直接看&#x2F;尝试就可以体会到本意了...
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;hr class=&quot;light&quot; &#x2F;&gt;
&lt;p&gt;
动力源自::&lt;b&gt;&lt;a href=&quot;http:&#x2F;&#x2F;txt2tags.sf.net&quot;&gt;txt2tags&lt;&#x2F;a&gt;&lt;&#x2F;b&gt;
&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;

&lt;!-- xhtml code generated by txt2tags 2.4 (http:&#x2F;&#x2F;txt2tags.sf.net) --&gt;
&lt;!-- cmdline: txt2tags .&#x2F;utility&#x2F;py4sys&#x2F;py4sa-rename-mp3s-2010-07-13-22-02.t2t --&gt;
</content>
</entry>
</feed>
