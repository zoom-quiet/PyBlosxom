<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh">
<title type="text">Z<sub>en</sub>o<sub>f</sub>o<sub>pen</sub>M<sup>ind</sup>. Q<sub>uickly</sub>u<sub>tility</sub>i<sub>nternet</sub>e<sub>asy</sub>t<sup>echnic</sup></title>
<subtitle type="html"><![CDATA[
Zoom.Quiet's PyBlosxom blogging
]]></subtitle>
<id>/pyblosxom/utility/py4sys/index.atom</id>
<link rel="alternate" type="text/html" href="/pyblosxom" />
<link rel="self" type="application/atom+xml" href="/pyblosxom/utility/py4sys/index.atom" />


<author>
<name>Zoom.Quiet</name>
<uri>/pyblosxom/utility/py4sys/index.atom</uri>
<email>zoomquiet+blog [AT] gmail.com</email>
</author>
<rights>Copyright 2001-2012 Zoom.Quiet</rights>
<generator uri="http://pyblosxom.sourceforge.net/" version="1.5.2">
PyBlosxom http://pyblosxom.sourceforge.net/ 1.5.2
</generator>

<updated>2010-07-14T02:22:00Z</updated>
<!-- icon?  logo?  -->

<entry>
<title type="html">[Py4SA]智能关闭触摸板</title>
<category term="" />
<id>/pyblosxom/2010/07/14/py4sa-off-wacom-touch-2010-07-14-10-22</id>
<updated>2010-07-14T02:22:00Z</updated>
<published>2010-07-14T02:22:00Z</published>
<link rel="alternate" type="text/html" href="/pyblosxom/utility/py4sys/py4sa-off-wacom-touch-2010-07-14-10-22.html" />
<content type="html">&lt;div class=&quot;header&quot; id=&quot;header&quot;&gt;
&lt;a name=&#x27;toptopTE5JSFNOQ&#x27; id=&#x27;toptopTE5JSFNOQ&#x27;&gt;&lt;&#x2F;a&gt;&lt;h1&gt;[Py4SA]智能关闭触摸板&lt;&#x2F;h1&gt;
&lt;h2&gt;--WACOM BAMBOO事务&lt;&#x2F;h2&gt;
&lt;h3&gt;t2t渲染:: 2010-10-09 14:21:37&lt;&#x2F;h3&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;toc&quot; id=&quot;toc&quot;&gt;
  &lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#toc1R0VYQ0IyT&quot;&gt;问题&lt;&#x2F;a&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;&lt;a href=&quot;#toc2R0lYQ0JaT&quot;&gt;尝试&lt;&#x2F;a&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;&lt;a href=&quot;#toc3R01YQ0FVR&quot;&gt;Py之&lt;&#x2F;a&gt;
  &lt;&#x2F;li&gt;
  &lt;&#x2F;ol&gt;

&lt;&#x2F;div&gt;
&lt;div class=&quot;body&quot; id=&quot;body&quot;&gt;
&lt;a id=&quot;toc1R0VYQ0IyT&quot; name=&quot;toc1R0VYQ0IyT&quot;&gt;&lt;&#x2F;a&gt;
&lt;h1&gt;&lt;A href=&#x27;#toptopTE5JSFNOQ&#x27;&gt; 1. 问题 &lt;&#x2F;A&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;
嗯嗯嗯,俺一直使用 WACOM 的数字绘图板替代鼠标的 ；－）
&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;去年生日，老婆升级了俺的 &lt;a href=&quot;http:&#x2F;&#x2F;www.wacom.com.cn&#x2F;products_before_detail.php?productsid=30&quot;&gt;FAVO CTE-430&lt;&#x2F;a&gt;
到 &lt;a href=&quot;http:&#x2F;&#x2F;www.wacom.com.cn&#x2F;bamboo&#x2F;case4-1.php&quot;&gt;BAMBOO CTH-461&lt;&#x2F;a&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;随着 Ubuntu 10.04系统，一同升级了驱动，非常好用:
    &lt;ol&gt;
    &lt;li&gt;小横板 248.2 x 176.1，和屏幕 1:1 对应，不用拖动，有空间感觉了直接就可以移动到对应区域!
    &lt;&#x2F;li&gt;
    &lt;li&gt;无线压感笔，直接点击就是左击鼠标
    &lt;&#x2F;li&gt;
    &lt;li&gt;笔有侧键，配置默认就是原先最舒服的:
     &lt;ul&gt;
     &lt;li&gt;上键是右击
     &lt;&#x2F;li&gt;
     &lt;li&gt;下键是中击
     &lt;&#x2F;li&gt;
     &lt;&#x2F;ul&gt;
    &lt;&#x2F;li&gt;
    &lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b&gt;触摸板的手指点击就不必要了&lt;&#x2F;b&gt;
 &lt;ul&gt;
 &lt;li&gt;如何令系统不启动触摸板的 &lt;code&gt;Touch&lt;&#x2F;code&gt; 响应?
 &lt;&#x2F;li&gt;
 &lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;a id=&quot;toc2R0lYQ0JaT&quot; name=&quot;toc2R0lYQ0JaT&quot;&gt;&lt;&#x2F;a&gt;
&lt;h1&gt;&lt;A href=&#x27;#toptopTE5JSFNOQ&#x27;&gt; 2. 尝试 &lt;&#x2F;A&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;linuxwacom.sourceforge.net&#x2F;index.php&#x2F;howto&#x2F;xsetwacom&quot;&gt;Command Line Configuration Interface (xsetwacom)&lt;&#x2F;a&gt;
    &lt;ul&gt;
    &lt;li&gt;官方是有命令行级别的配置工具的
    &lt;&#x2F;li&gt;
    &lt;li&gt;但是！真TMD难以看明白哈
    &lt;&#x2F;li&gt;
    &lt;li&gt;广泛的搜索后，大致明白,xsetwacom 提供两种配置输出:
        &lt;ol&gt;
        &lt;li&gt;命令行用的执行字串
        &lt;&#x2F;li&gt;
        &lt;li&gt;配置文件中使用的配置文本
        &lt;&#x2F;li&gt;
        &lt;&#x2F;ol&gt;
    &lt;&#x2F;li&gt;
    &lt;li&gt;整个使用流程是:
        &lt;ol&gt;
        &lt;li&gt;使用其它系统监察命令，确认 WACOM 设备USB接入后的设备号
        &lt;&#x2F;li&gt;
        &lt;li&gt;使用 xsetwacom 进行模拟配置，选择输出合适的配置命令
        &lt;&#x2F;li&gt;
        &lt;li&gt;然后将输出的配置内容,部署到合适的系统启动脚本或是配置文件中
        &lt;p&gt;&lt;&#x2F;p&gt;
        &lt;&#x2F;li&gt;
        &lt;&#x2F;ol&gt;
    &lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;俺习惯使用命令行配置,这样可以直接测试是否靠谱,但是发现:
&lt;pre class=&quot;brush:  shell&quot;&gt;

~&amp;gt; xinput --list 
⎡ Virtual core pointer                    	id=2	[master pointer  (3)]
⎜   ↳ Virtual core XTEST pointer              	id=4	[slave  pointer  (2)]
⎜   ↳ Wacom Bamboo Craft Pen eraser           	id=11	[slave  pointer  (2)]
⎜   ↳ Wacom Bamboo Craft Pen                  	id=12	[slave  pointer  (2)]
⎜   ↳ Wacom Bamboo Craft Finger pad           	id=13	[slave  pointer  (2)]
⎜   ↳ Wacom Bamboo Craft Finger               	id=14	[slave  pointer  (2)]
⎜   ↳ TPPS&#x2F;2 IBM TrackPoint                   	id=16	[slave  pointer  (2)]
⎜   ↳ Macintosh mouse button emulation        	id=18	[slave  pointer  (2)]
⎣ Virtual core keyboard                   	id=3	[master keyboard (2)]
    ↳ Virtual core XTEST keyboard             	id=5	[slave  keyboard (3)]
...
&lt;&#x2F;pre&gt;
    &lt;ul&gt;
    &lt;li&gt;使用 xinput 探察出来的 &lt;b&gt;Wacom Bamboo Craft Finger&lt;&#x2F;b&gt; 触摸板设备号,每次重启系统时不一定一样!
    &lt;&#x2F;li&gt;
    &lt;li&gt;FT! 那就得编程让系统重启时,自个儿探察一下设备号,然后使用固定的配置命令关闭 BAMBOO 对应设备
    &lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;dl&gt;
&lt;dt&gt;如何在Shell 中获取另外系统命令的输出并截获对应数码组合成新的命令?:&lt;&#x2F;dt&gt;&lt;dd&gt;
    嗯嗯嗯,,,
    嗯嗯嗯,,,,直接囧掉!
    俺没有这种功力!
&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;

&lt;a id=&quot;toc3R01YQ0FVR&quot; name=&quot;toc3R01YQ0FVR&quot;&gt;&lt;&#x2F;a&gt;
&lt;h1&gt;&lt;A href=&#x27;#toptopTE5JSFNOQ&#x27;&gt; 3. Py之 &lt;&#x2F;A&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;直接使用模板记录要执行的命令,预留可能变动的设备号:
&lt;pre class=&quot;brush:  shell&quot;&gt;

#!&#x2F;bin&#x2F;sh
### xinput4bamboo.tpl
sleep 3 &amp;amp;&amp;amp; xsetwacom set %s Touch &quot;off&quot;

&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;配合xinput4bamboo.py 
&lt;pre class=&quot;brush:  py&quot;&gt;

import sys,os
if __name__ == &#x27;__main__&#x27;:      # this way the module can be
    &quot;&quot;&quot;usage:
    $ xinput --list | grep &quot;Wacom Bamboo Craft Finger&quot; | python .&#x2F;xinput4bamboo.py
    &quot;&quot;&quot;
    if sys.stdin:
        for l in sys.stdin.readlines():
            if &quot;pad&quot; not in l:
                bambooid= l.split()[6].split(&quot;=&quot;)[1]
                open(&quot;xinput4bamboo.sh&quot;,&quot;w&quot;).write(open(&quot;xinput4bamboo.tpl&quot;).read()%bambooid)
                os.chmod(&quot;xinput4bamboo.sh&quot;,0755)

&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;组合成启动脚本
&lt;pre class=&quot;brush:  shell&quot;&gt;

#!&#x2F;bin&#x2F;sh
VER=&quot;main-rcloc.sh v10.7.14&quot;
DATE=`date &quot;+%y%m%d&quot;`
MYRC=&quot;&#x2F;home&#x2F;zoomq&#x2F;.zoomq&#x2F;rc.local&quot;
#=========================================================== path defines
LOGF=&quot;&#x2F;var&#x2F;log&#x2F;0day&#x2F;$DATE-myrcloc.log&quot;
#=========================================================== action defines
cd $MYRC
xinput --list | grep &quot;Wacom Bamboo Craft Finger&quot; | python .&#x2F;xinput4bamboo.py  &amp;gt;&amp;gt; $LOGF 2&amp;gt;&amp;amp;1 
.&#x2F;xinput4bamboo.sh  &amp;gt;&amp;gt; $LOGF 2&amp;gt;&amp;amp;1 
&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;部属成启动应用:
 &lt;ul&gt;
 &lt;li&gt;&lt;img align=&quot;middle&quot; src=&quot;&#x2F;pybimage&#x2F;2010&#x2F;zoomq-2010-07-14-123737_530x267_scrot.png&quot; border=&quot;0&quot; alt=&quot;&quot;&#x2F;&gt;
 &lt;p&gt;&lt;&#x2F;p&gt;
&lt;b&gt;齐活！&lt;&#x2F;b&gt; 没有疑惑，随手写成！ 5分钟！
 &lt;&#x2F;li&gt;
 &lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;dl&gt;
&lt;dt&gt;Python在Unix和Linux系统管理中的应用(影印版):&lt;&#x2F;dt&gt;&lt;dd&gt;
&lt;a href=&quot;http:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;3767034&#x2F;&quot;&gt;&lt;img align=&quot;middle&quot; src=&quot;&#x2F;pybimage&#x2F;2010&#x2F;s3876423-py4unix-linux-sa.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&#x2F;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;

&lt;ul&gt;
&lt;li&gt;绝对好书! 值得慢慢看,E文非常简洁,Py清明的代码,直接看&#x2F;尝试就可以体会到本意了...
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;hr class=&quot;light&quot; &#x2F;&gt;
&lt;p&gt;
动力源自::&lt;b&gt;&lt;a href=&quot;http:&#x2F;&#x2F;txt2tags.sf.net&quot;&gt;txt2tags&lt;&#x2F;a&gt;&lt;&#x2F;b&gt;
&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;

&lt;!-- xhtml code generated by txt2tags 2.4 (http:&#x2F;&#x2F;txt2tags.sf.net) --&gt;
&lt;!-- cmdline: txt2tags .&#x2F;utility&#x2F;py4sys&#x2F;py4sa-off-wacom-touch-2010-07-14-10-22.t2t --&gt;
</content>
</entry>

<entry>
<title type="html">[Py4SA]批量文件重命名</title>
<category term="" />
<id>/pyblosxom/2010/07/13/py4sa-rename-mp3s-2010-07-13-22-02</id>
<updated>2010-07-13T14:02:00Z</updated>
<published>2010-07-13T14:02:00Z</published>
<link rel="alternate" type="text/html" href="/pyblosxom/utility/py4sys/py4sa-rename-mp3s-2010-07-13-22-02.html" />
<content type="html">&lt;div class=&quot;header&quot; id=&quot;header&quot;&gt;
&lt;a name=&#x27;toptopTE5JSFNOQ&#x27; id=&#x27;toptopTE5JSFNOQ&#x27;&gt;&lt;&#x2F;a&gt;&lt;h1&gt;[Py4SA]批量文件重命名&lt;&#x2F;h1&gt;
&lt;h2&gt;--远离Shell 的试探&lt;&#x2F;h2&gt;
&lt;h3&gt;t2t渲染:: 2010-10-09 14:21:37&lt;&#x2F;h3&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;toc&quot; id=&quot;toc&quot;&gt;
  &lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#toc1R0VYQ0IyT&quot;&gt;问题&lt;&#x2F;a&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;&lt;a href=&quot;#toc2R0lYQ0JaT&quot;&gt;尝试&lt;&#x2F;a&gt;
  &lt;&#x2F;li&gt;
  &lt;li&gt;&lt;a href=&quot;#toc3R01YQ0FVR&quot;&gt;Py之&lt;&#x2F;a&gt;
  &lt;&#x2F;li&gt;
  &lt;&#x2F;ol&gt;

&lt;&#x2F;div&gt;
&lt;div class=&quot;body&quot; id=&quot;body&quot;&gt;
&lt;a id=&quot;toc1R0VYQ0IyT&quot; name=&quot;toc1R0VYQ0IyT&quot;&gt;&lt;&#x2F;a&gt;
&lt;h1&gt;&lt;A href=&#x27;#toptopTE5JSFNOQ&#x27;&gt; 1. 问题 &lt;&#x2F;A&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;
嗯嗯嗯,最近从 六哥的 DUKU 重新激发了评书的记忆,下载了全本 袁阔成(40回)红岩魂的mp3 ;-)
&lt;&#x2F;p&gt;
&lt;p&gt;
可是解开都是乱码文件名:
&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;:&lt;img align=&quot;middle&quot; src=&quot;&#x2F;pybimage&#x2F;2010&#x2F;zoomq-2010-07-14-105626_446x300_scrot.png&quot; border=&quot;0&quot; alt=&quot;&quot;&#x2F;&gt;;
&lt;&#x2F;li&gt;
&lt;li&gt;可恶的中文编码! 一定是在XP 中使用CP936 压出来的
&lt;&#x2F;li&gt;
&lt;li&gt;怎么整呢?
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;dl&gt;
&lt;dt&gt;Python在Unix和Linux系统管理中的应用(影印版):&lt;&#x2F;dt&gt;&lt;dd&gt;
&lt;a href=&quot;http:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;3767034&#x2F;&quot;&gt;&lt;img align=&quot;middle&quot; src=&quot;&#x2F;pybimage&#x2F;2010&#x2F;s3876423-py4unix-linux-sa.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&#x2F;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;

&lt;ul&gt;
&lt;li&gt;绝对好书! 值得慢慢看,E文的也非常简洁,Py 清明的代码,直接看,尝试就可以体会到本意了...
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;a id=&quot;toc2R0lYQ0JaT&quot; name=&quot;toc2R0lYQ0JaT&quot;&gt;&lt;&#x2F;a&gt;
&lt;h1&gt;&lt;A href=&#x27;#toptopTE5JSFNOQ&#x27;&gt; 2. 尝试 &lt;&#x2F;A&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;
&lt;code&gt;已知有很多途径...&lt;&#x2F;code&gt;参考:&lt;a href=&quot;http:&#x2F;&#x2F;hi.baidu.com&#x2F;sdusoul&#x2F;blog&#x2F;item&#x2F;16f81a9508a1d640d0135ede.html&quot;&gt;linux下批量修改文件名_乌哥的家常菜_百度空间&lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;使用find、awk&#x2F;grep&#x2F;sed、mv等命令组合来实现
    &lt;ul&gt;
    &lt;li&gt;俺都不熟练,而且要串很多步操作，忒不直爽了..
    &lt;p&gt;&lt;&#x2F;p&gt;
    &lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;编写Shell脚本运行~ 不就是命令组合嘛,,.,
&lt;&#x2F;li&gt;
&lt;li&gt;rename ... NGU&#x2F;Linux 中的标准化重命名工具,但是,怎么可以将批量文件中指定前几个字符替换成指定字符?
&lt;pre class=&quot;brush:  shell&quot;&gt;

~&#x2F;media&#x2F;4talking&#x2F;袁阔诚&#x2F;try&amp;gt; rename -n &#x27;s&#x2F;^.{6}&#x2F;红岩魂&#x2F;&#x27; *.mp3
...
���һ�38.mp3 renamed as 红岩魂38.mp3
���һ�39.mp3 renamed as 红岩魂39.mp3
���һ�40.mp3 renamed as 红岩魂40.mp3
&lt;&#x2F;pre&gt;
    &lt;ul&gt;
    &lt;li&gt;反复尝试半小时才获得满意的...
    &lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;

&lt;a id=&quot;toc3R01YQ0FVR&quot; name=&quot;toc3R01YQ0FVR&quot;&gt;&lt;&#x2F;a&gt;
&lt;h1&gt;&lt;A href=&#x27;#toptopTE5JSFNOQ&#x27;&gt; 3. Py之 &lt;&#x2F;A&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;
想嘗試Py 的思路...
&lt;&#x2F;p&gt;
&lt;pre class=&quot;brush:  py&quot;&gt;

import sys,shutil
if __name__ == &#x27;__main__&#x27;:      # this way the module can be
    &#x27;&#x27;&#x27;usage:
        $ ls *.mp3 | python rename-zh.py
    &#x27;&#x27;&#x27;
    if sys.stdin:
        for l in sys.stdin.readlines():
            shutil.copyfile(l[:-1], &quot;redStoneSoul-%s&quot;%l[6:-1])
&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;好的,没有尝试,随手写来,3分钟搞掂
&lt;p&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;dl&gt;
&lt;dt&gt;Python在Unix和Linux系统管理中的应用(影印版):&lt;&#x2F;dt&gt;&lt;dd&gt;
&lt;a href=&quot;http:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;3767034&#x2F;&quot;&gt;&lt;img align=&quot;middle&quot; src=&quot;&#x2F;pybimage&#x2F;2010&#x2F;s3876423-py4unix-linux-sa.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&#x2F;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;

&lt;ul&gt;
&lt;li&gt;绝对好书! 值得慢慢看,E文非常简洁,Py清明的代码,直接看&#x2F;尝试就可以体会到本意了...
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;hr class=&quot;light&quot; &#x2F;&gt;
&lt;p&gt;
动力源自::&lt;b&gt;&lt;a href=&quot;http:&#x2F;&#x2F;txt2tags.sf.net&quot;&gt;txt2tags&lt;&#x2F;a&gt;&lt;&#x2F;b&gt;
&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;

&lt;!-- xhtml code generated by txt2tags 2.4 (http:&#x2F;&#x2F;txt2tags.sf.net) --&gt;
&lt;!-- cmdline: txt2tags .&#x2F;utility&#x2F;py4sys&#x2F;py4sa-rename-mp3s-2010-07-13-22-02.t2t --&gt;
</content>
</entry>
</feed>
